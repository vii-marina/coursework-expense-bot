import discord
from discord.ext import commands
from discord.ui import Modal, TextInput, Select, View, Button
from utils.helpers import load_data, save_data, EXPENSES_FILE
from datetime import datetime
from io import BytesIO
import matplotlib.pyplot as plt
from discord import File
from cogs.charts import draw_donut_chart

# --- –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏ ---
class ExpenseModal(Modal, title="–í–≤–µ–¥–µ–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏"):
    def __init__(self, user_id, category):
        super().__init__()
        self.user_id = str(user_id)
        self.category = category
        self.amount = TextInput(label="–°—É–º–∞", placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–∏—Ç—Ä–∞—Ç–∏ –≤ –≥—Ä–Ω", required=True)
        self.date = TextInput(label="–î–∞—Ç–∞ (–î–î/–ú–ú/–†–†–†–† –∞–±–æ 01042025)", placeholder="–î–î/–ú–ú/–†–†–†–†", required=False)
        self.add_item(self.amount)
        self.add_item(self.date)

    async def on_submit(self, interaction: discord.Interaction):
        try:
            amount_value = float(self.amount.value)
        except ValueError:
            await interaction.response.send_message("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–∏.", ephemeral=True)
            return

        raw_date = self.date.value.strip()
        if not raw_date:
            date = datetime.now()
        else:
            if raw_date.isdigit() and len(raw_date) == 8:
                raw_date = f"{raw_date[:2]}/{raw_date[2:4]}/{raw_date[4:]}"
            try:
                date = datetime.strptime(raw_date, "%d/%m/%Y")
            except ValueError:
                await interaction.response.send_message("‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ –¥–∞—Ç–∞.", ephemeral=True)
                return

        data = load_data(EXPENSES_FILE)
        user_expenses = data.get(self.user_id, [])
        user_expenses.append({"category": self.category, "amount": amount_value, "date": date.strftime("%d/%m/%Y")})
        data[self.user_id] = user_expenses
        save_data(EXPENSES_FILE, data)

        settings = load_data("data/settings.json")
        user_settings = settings.get(self.user_id, {})
        daily_limit = user_settings.get("daily_limit", None)

        await interaction.response.send_message(
            f"‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ {amount_value:.2f} –≥—Ä–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó **{self.category}** –Ω–∞ {date.strftime('%d/%m/%Y')}.",
            ephemeral=True
        )

        if daily_limit is not None:
            today = datetime.now().strftime("%d/%m/%Y")
            today_total = sum(
                float(e["amount"]) for e in user_expenses if e["date"] == today
            )
            if today_total > daily_limit:
                await interaction.followup.send("‚ö†Ô∏è **–£–í–ê–ì–ê!! –í–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–ª–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π –ª—ñ–º—ñ—Ç, –±–µ—Ä–µ–∂—ñ—Ç—å —Å–≤–æ—ó –∫–æ—à—Ç–∏ üòâ**")

class SetLimitModal(Modal, title="–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ª—ñ–º—ñ—Ç –≤–∏—Ç—Ä–∞—Ç"):
    def __init__(self, user_id):
        super().__init__()
        self.user_id = str(user_id)
        self.limit = TextInput(label="–õ—ñ–º—ñ—Ç (–≥—Ä–Ω)", placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 500", required=True)
        self.add_item(self.limit)

    async def on_submit(self, interaction: discord.Interaction):
        try:
            limit = float(self.limit.value)
        except ValueError:
            await interaction.response.send_message("‚ùå –í–≤–µ–¥–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ —á–∏—Å–ª–æ.", ephemeral=True)
            return

        settings = load_data("data/settings.json")
        user_settings = settings.get(self.user_id, {})
        user_settings["daily_limit"] = limit
        settings[self.user_id] = user_settings
        save_data("data/settings.json", settings)

        await interaction.response.send_message(f"‚úÖ –õ—ñ–º—ñ—Ç –≤–∏—Ç—Ä–∞—Ç –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {limit:.2f} –≥—Ä–Ω/–¥–µ–Ω—å.", ephemeral=True)


class CategorySelectView(View):
    def __init__(self, user_id, categories):
        super().__init__(timeout=60)
        self.add_item(CategorySelect(user_id, categories))

class CategorySelect(Select):
    def __init__(self, user_id, categories):
        self.user_id = str(user_id)
        options = [discord.SelectOption(label=cat) for cat in categories]
        super().__init__(placeholder="–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é", options=options)

    async def callback(self, interaction: discord.Interaction):
        await interaction.response.send_modal(ExpenseModal(self.user_id, self.values[0]))

async def show_expense_report(interaction: discord.Interaction, user_id: str):
    data = load_data(EXPENSES_FILE)
    expenses = data.get(str(user_id), [])
    if not expenses:
        await interaction.response.send_message("üì≠ –ù–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç –¥–ª—è –∑–≤—ñ—Ç—É.", ephemeral=True)
        return

    summary = {}
    for e in expenses:
        cat = e["category"]
        summary[cat] = summary.get(cat, 0) + float(e["amount"])

    lines = [f"**{cat}**: {amount:.2f} –≥—Ä–Ω" for cat, amount in summary.items()]
    await interaction.response.send_message("üìä **–ó–≤—ñ—Ç –ø—Ä–æ –≤–∏—Ç—Ä–∞—Ç–∏:**\n" + "\n".join(lines), ephemeral=True)

async def show_expense_chart(interaction: discord.Interaction, user_id: str):
    data = load_data(EXPENSES_FILE)
    expenses = data.get(str(user_id), [])
    if not expenses:
        await interaction.response.send_message("üì≠ –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –¥—ñ–∞–≥—Ä–∞–º–∏.", ephemeral=True)
        return

    summary = {}
    for e in expenses:
        cat = e["category"]
        summary[cat] = summary.get(cat, 0) + float(e["amount"])

    await draw_donut_chart(interaction, summary, "–†–æ–∑–ø–æ–¥—ñ–ª –≤–∏—Ç—Ä–∞—Ç")
