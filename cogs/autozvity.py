import discord
from discord.ext import commands, tasks
from utils.helpers import load_data, EXPENSES_FILE
from datetime import datetime, timedelta


class AutoReport(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.report_task.start()

    def cog_unload(self):
        self.report_task.cancel()

    @tasks.loop(hours=24)
    async def report_task(self):
        await self.bot.wait_until_ready()
        now = datetime.now()

        if now.hour != 9:
            return  # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∑–≤—ñ—Ç–∏ –ª–∏—à–µ –æ 9 —Ä–∞–Ω–∫—É

        expenses_data = load_data(EXPENSES_FILE)

        for user_id, expenses in expenses_data.items():
            if not expenses:
                continue

            # –†–∞—Ö—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏
            # –ü–æ–∫–∏ —â–æ –±–µ–∑ –¥–∞—Ç–∏ ‚Äî –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤–Ω–∏–π —Å–ø–∏—Å–æ–∫
            summary = {}
            for entry in expenses:
                category = entry.get("category", "–Ü–Ω—à–µ")
                amount = float(entry.get("amount", 0))
                summary[category] = summary.get(category, 0) + amount

            text = "\n".join([f"‚Ä¢ {cat}: {amt:.2f} –≥—Ä–Ω" for cat, amt in summary.items()])
            total = sum(summary.values())
            text += f"\n\n–ó–∞–≥–∞–ª–æ–º: {total:.2f} –≥—Ä–Ω"

            user = self.bot.get_user(int(user_id))
            if user:
                try:
                    await user.send(f"üìä **–í–∞—à –∑–≤—ñ—Ç –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:**\n{text}")
                except discord.Forbidden:
                    print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–≤—ñ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id} ‚Äî DM –∑–∞–∫—Ä–∏—Ç—ñ")

    @report_task.before_loop
    async def before_report(self):
        await self.bot.wait_until_ready()

    @commands.command(name="—Ç–µ—Å—Ç_–∑–≤—ñ—Ç")
    async def test_report(self, ctx):
        """–ü—Ä–∏–º—É—Å–æ–≤–∏–π –∑–∞–ø—É—Å–∫ –∑–≤—ñ—Ç—É (–¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)"""
        expenses_data = load_data(EXPENSES_FILE)
        user_id = str(ctx.author.id)
        user_expenses = expenses_data.get(user_id, [])

        if not user_expenses:
            await ctx.author.send("üì≠ –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç.")
            return

        summary = {}
        for entry in user_expenses:
            category = entry.get("category", "–Ü–Ω—à–µ")
            amount = float(entry.get("amount", 0))
            summary[category] = summary.get(category, 0) + amount

        text = "\n".join([f"‚Ä¢ {cat}: {amt:.2f} –≥—Ä–Ω" for cat, amt in summary.items()])
        total = sum(summary.values())
        text += f"\n\n–ó–∞–≥–∞–ª–æ–º: {total:.2f} –≥—Ä–Ω"

        await ctx.author.send(f"üìä **–í–∞—à —Ç–µ—Å—Ç–æ–≤–∏–π –∑–≤—ñ—Ç:**\n{text}")


async def setup(bot):
    await bot.add_cog(AutoReport(bot))

